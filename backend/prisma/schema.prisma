generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String 
  address String
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  cartItems CartItem[]
}

model Seller {
  id String @id @default(uuid())
  name String 
  address String
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  products Product[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Int
  images      String
  stock       Int
  sellerId    String
  seller      Seller   @relation(fields: [sellerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cartItems   CartItem[]

  @@index([sellerId])
  @@index([createdAt])
  @@index([price])
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model PasswordResetToken {
  id                 String   @id @default(cuid())
  email              String   @unique
  tokenHash          String
  createdAt          DateTime @default(now())
  expiresAt          DateTime
  attempts           Int      @default(0)
  resendAvailableAt  DateTime
  status             String   @default("active")
  verified           Boolean  @default(false)
}